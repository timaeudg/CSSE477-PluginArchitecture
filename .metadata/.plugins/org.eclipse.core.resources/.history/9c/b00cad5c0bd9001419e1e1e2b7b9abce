package main;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;

import framework.IPlugin;
import framework.Plugin;

public class PluginLoader {

	List<IPlugin> loadPlugins;
	
	public PluginLoader(List<IPlugin> plugins){
		
		loadPlugins = plugins;
		
	};
	
	public PluginLoader(){
		
		loadPlugins = new ArrayList<>();
		try{
		System.out.println("yi");
		String current = new java.io.File( "." ).getCanonicalPath();
		System.out.println(current);
		loadJar(current + "/src/main/examplePlugin.jar");
		
		} catch(Exception e) {
			
		}
	};
	
	public void loadJar(String filePath){
		
		try {
		JarFile jarFile = new JarFile(filePath);
	    Enumeration<JarEntry> e = jarFile.entries();

	    URL[] urls = { new URL("jar:file:" + filePath+"!/") };
	    URLClassLoader cl = URLClassLoader.newInstance(urls);
	    System.out.println("guh");
	        while (e.hasMoreElements()) {
	        	try {
		        	System.out.println("bleh");
		            JarEntry je = (JarEntry) e.nextElement();
		            if(je.isDirectory() || !je.getName().endsWith(".class")){
		                continue;
		            }
		            String className = je.getName().substring(0,je.getName().length()-6);
		            className = className.replace('/', '.');
		            Class c = cl.loadClass(className);
		            Constructor<IPlugin> constructor = c.getConstructor();
		            IPlugin i = constructor.newInstance();
		            this.loadPlugins.add(i);
	        	} catch (ClassNotFoundException cnfe) {
	        		System.err.println("Class not found");
	        		cnfe.printStackTrace();
	        	} catch (NoSuchMethodException e1) {
					System.err.println("No such method");
					e1.printStackTrace();
				} catch (SecurityException e1) {
					System.err.println("Security Exception");
					e1.printStackTrace();
				} catch (InstantiationException e1) {
					System.err.println("Instantiation Exception");
					e1.printStackTrace();
				} catch (IllegalAccessException e1) {
					System.err.println("IllegalAccessException");
					e1.printStackTrace();
				} catch (IllegalArgumentException e1) {
					System.err.println("IllegalArgumentException");
					e1.printStackTrace();
				} catch (InvocationTargetException e1) {
					System.err.println("InvocationTargetException");
					e1.printStackTrace();
				}

	        }   
		
		} catch(IOException e) {
			System.err.println("JarFile load Error");
		} 
		
	}
	
}
